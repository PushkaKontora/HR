"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import base64
import logging
import os.path
from base64 import b64encode
from datetime import timedelta
from pathlib import Path

import loguru
import psycopg2.extensions
from environ import Env
from loguru import logger

from api.logging import TelegramNotifier

env = Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY", str)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG", bool, False)

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "api.logging.RequestIdMiddleware",
    "api.middleware.Process500",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "api", "internal", "v1", "vacancy_requests", "domain", "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": env("POSTGRES_DB", str),
        "USER": env("POSTGRES_USER", str),
        "PASSWORD": env("POSTGRES_PASSWORD", str),
        "HOST": env("POSTGRES_HOST", str),
        "PORT": env("POSTGRES_PORT", int),
    },
    "OPTIONS": {
        "isolation_level": psycopg2.extensions.ISOLATION_LEVEL_REPEATABLE_READ,
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Media

if DEBUG:
    MEDIA_URL = "http://localhost:8000/media/"
    MEDIA_ROOT = os.path.join(BASE_DIR.parent, "media/")
    INSTALLED_APPS += ["django_cleanup.apps.CleanupConfig"]
else:
    DEFAULT_FILE_STORAGE = "api.storage.TimeoutS3Boto3Storage"

    AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID", str)
    AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY", str)
    AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME", str)
    AWS_S3_ENDPOINT_URL = env("AWS_S3_ENDPOINT_URL", str)
    AWS_QUERYSTRING_EXPIRE = timedelta(days=1).total_seconds()

    S3_NETWORK_CONNECTION_TIMEOUT_SECONDS = env("S3_NETWORK_CONNECTION_TIMEOUT_SECONDS", int)
    S3_NETWORK_READ_TIMEOUT_SECONDS = env("S3_NETWORK_READ_TIMEOUT_SECONDS", int)
    S3_NETWORK_RETRY_COUNT = env("S3_NETWORK_RETRY_COUNT", int)

# Authentication

SALT = b"$2b$12$" + env("SALT_POSTFIX", str).encode()

REFRESH_TOKEN_COOKIE = "rf_tk"

ACCESS_TOKEN_TTL = timedelta(minutes=30) if not DEBUG else timedelta(days=1)
REFRESH_TOKEN_TTL = timedelta(days=10)


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# CORS

CORS_ALLOW_ALL_ORIGINS = True


# Pagination

PAGINATION_PER_PAGE = 100


# Emailing

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_HOST_USER = env("EMAIL_HOST_USER", str)
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", str)
EMAIL_PORT = env("EMAIL_PORT", int)
EMAIL_USE_TLS = True
MAX_FILE_SIZE_BYTES = 5 * 1024**2

VACANCY_REQUEST_EMAIL_SUBJECT = env("VACANCY_REQUEST_EMAIL_SUBJECT", str)
SUPPORT_EMAIL_ADDRESS = env("SUPPORT_EMAIL_ADDRESS", str)


# Logging

LOGS_PATH = os.path.join(BASE_DIR.parent, "logs")
LOG_ROTATION = "00:00"
LOG_COMPRESSION = "zip"
LOG_FORMAT = "[{extra[request_id]}][{time:YYYY-MM-DD HH:mm:ss}][{name}:{function}] {message}"

if not DEBUG:
    logger.remove()

    logger.add(
        TelegramNotifier(env("LOGGING_TELEGRAM_BOT_TOKEN", str), env("LOGGING_TELEGRAM_CHAT_ID", int)),
        level=logging.ERROR,
        format=LOG_FORMAT,
        diagnose=False,
        enqueue=True,
    )

logger.add(
    os.path.join(LOGS_PATH, "api.log"),
    level=logging.INFO if not DEBUG else logging.DEBUG,
    format=LOG_FORMAT,
    rotation=LOG_ROTATION,
    compression=LOG_COMPRESSION,
    diagnose=False,
    enqueue=True,
)
